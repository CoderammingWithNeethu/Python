#Use iterator functions like enumerate, zip, iter, next

def main():
    days = ['Sun','Mon','Tue','Wed','Thr','Fri','Sat']
    daysFrench = ['Dim','Lun','Mar','Mer','Jeu','Ven','Sam']

    #TODO : use iter to create an iterator over a collection
    i = iter(days)
    print(next(i))
    print(next(i))
    print(next(i))
    #Useful when you give it a function to generate the sequence items 

    #TODO : iterate using a function and a sentinel 
    with open('6_iter_sample.txt','r') as f:
        for line in iter(f.readline,''):
            #readline to genrate or retrieve next line in the file ; 
            #'' is a sentinal value;  if the value generated by readlines, is empty i.e equal to the sentinal value , the iterator will stop  
            print(line)

    
    #TODO : use regular iteration over the days
    for m in range(len(days)):
        print(m+1,days[m])

    #TODO : using enumerate reduces code and provides a counter 
    print('-'*10,'ENUMERATE')
    for i,m in enumerate(days,start=1):
        print(i,m)

    #TODO : use zip to combine sequences
    for m in zip(days,daysFrench):
        print(m)

    for i,m in enumerate(zip(days,daysFrench),start=1):
        print(i,m[0], 'in Freach is ',m[1])

    #same length sequence for zip function 
    #if sequence not same length, then short sequence when exhausted then terminated in zip function 

if __name__ == '__main__':
    main()